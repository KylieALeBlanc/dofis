    # Add charter geography based on geography of traditional public schools and FRPL
    cnty_type = {}
    for cnty in list(data['cntyname'].unique()):
        geo_list = list(data[data.cntyname == cnty]['geography'].value_counts().keys())
        try:
            max_geo = geo_list[0]
            cnty_type[cnty] = max_geo
        except:
            print(cnty)
            print(geo_list)
    new_geo = []
    for geo, cnty, charter, frpl in zip(data.geography, data.cntyname, data.charter, data.students_frpl):
        if charter == True:
            if (frpl > .35) and (cnty_type[cnty] == 'Suburban'):
                new_geo.append('Urban')
        else:
            new_geo.append(cnty_type[cnty])
    data['geography'] = new_geo



def gen_vars_scores(data):
       # Performance

    # Standardize within subject using mean and standard deviation from 2014-15
    data = clean_for_merge.standardize_scores(data=data, std_year=2015)
    elem_math = ['m_3rd_std', 'm_4th_std', 'm_5th_std']
    elem_reading =  ['r_3rd_std', 'r_4th_std', 'r_5th_std']
    elem = ['m_3rd_std', 'm_4th_std', 'm_5th_std','r_3rd_std', 'r_4th_std', 'r_5th_std']
    middle_math = ['m_6th_std', 'm_7th_std', 'm_8th_std']
    middle_reading = ['r_6th_std', 'r_7th_std', 'r_8th_std']
    middle_science = ['s_8th_std']
    algebra = ['alg_std']
    biology = ['bio_std']
    eng1 = ['eng1_std']
    math = ['m_3rd_std', 'm_4th_std', 'm_5th_std', 'm_6th_std', 'm_7th_std', 'm_8th_std']
    reading = ['r_3rd_std', 'r_4th_std', 'r_5th_std', 'r_6th_std', 'r_7th_std', 'r_8th_std']

    all_scores = ['m_3rd_std', 'm_4th_std', 'm_5th_std', 'm_6th_std', 'm_7th_std', 'm_8th_std',
            'r_3rd_std', 'r_4th_std', 'r_5th_std', 'r_6th_std', 'r_7th_std', 'r_8th_std',
            's_8th_std',
            'alg_std', 'bio_std']


    data['elem_math'] = data[elem_math].mean(axis=1)
    data['elem_reading'] = data[elem_reading].mean(axis=1)
    data['elem'] = data[elem].mean(axis=1)

    data['middle_math'] = data[middle_math].mean(axis=1)
    data['middle_reading'] = data[middle_reading].mean(axis = 1)
    data['middle_science'] = data[middle_science].mean(axis = 1)

    data['algebra'] = data[algebra].mean(axis = 1)
    data['biology'] = data[biology].mean(axis = 1)
    data['eng1'] = data[eng1].mean(axis = 1)

    data['math'] = data[math].mean(axis = 1)
    data['reading'] = data[reading].mean(axis = 1)

    data['avescores'] = data[all_scores].mean(axis=1)

    return data
